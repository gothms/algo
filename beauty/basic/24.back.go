package basic

/*
回溯算法：从电影《蝴蝶效应》中学习回溯算法的核心思想

回溯算法（Back tracking Algorithms）
	深度优先搜索
	正则表达式匹配
	编译原理中的语法分析
	...
数学问题
	数独
	八皇后
	0-1 背包
	图的着色
	旅行商问题
	全排列
	...
如何理解“回溯算法”？
	深度优先搜索算法利用的是回溯算法思想
	回溯的处理思想，有点类似枚举搜索
	回溯算法的思想非常简单，大部分情况下，都是用来解决广义的搜索问题，也就是，从一组可能的解中，选择出一个满足要求的解
	回溯算法非常适合用递归来实现
	剪枝操作是提高回溯效率的一种技巧

经典问题的实现
	八皇后问题
	0-1 背包
	正则表达式
0-1 背包
	方案：
		经典解法是动态规划
		回溯算法，简单但没有那么高效的解法
	问题描述：
		有一个背包，背包总的承载重量是 Wkg。现在我们有 n 个物品，每个物品的重量不等，并且不可分割。我们现在期望选择几件物品，装载到背包中
		在不超过背包所能装载重量的前提下，如何让背包中物品的总重量最大？
	回溯算法：
		22.greedy.go 中的背包问题，物品是可以分割的
		对于每个物品，有装与不装进背包两种选择，穷举 2^n 种装法
正则表达式
	问题描述：
		假设正则表达式中只包含“*”和“?”这两种通配符，并且对这两个通配符的语义稍微做些改变
		其中，“*”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符
	解决思路：
		1.依次考察正则表达式中的每个字符，当是非通配符时，就直接跟文本的字符进行匹配，如果相同，则继续往下处理
			如果不同，则回溯
		2.如果遇到特殊字符的时候，比如“*”有多种匹配方案，可以匹配任意个文本串中的字符
			先随意的选择一种匹配方案，然后继续考察剩下的字符
			如果中途发现无法继续匹配下去了，我们就回到这个岔路口，重新选择一种匹配方案，然后再继续匹配剩下的字符

思考
	0-1 背包问题稍加改造，如果每个物品不仅重量不同，价值也不同。如何在不超过背包重量的情况下，让背包中的总价值最大？
		// TODO
补充
	回溯算法本质上就是枚举
	优点在于其类似于摸着石头过河的查找策略，且可以通过剪枝少走冤枉路
	它可能适合应用于缺乏规律，或我们还不了解其规律的搜索场景中
*/
// TODO 三个经典问题的代码
