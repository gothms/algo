package basic

/*
图的表示：如何存储微博、微信等社交网络中的好友关系？

图（Graph）
	图的搜索
	最短路径
	最小生成树
	二分图
	...

如何理解“图”？
	图中的元素我们就叫做顶点（vertex）
	图中的一个顶点可以与任意其他顶点建立连接关系，这种关系叫做边（edge）
	度（degree），就是跟顶点相连接的边的条数

	边有方向的图叫做“有向图”
	边没有方向的图就叫做“无向图”
	入度（In-degree）：表示有多少条边指向这个顶点
		微博：有多少粉丝
	出度（Out-degree）：表示有多少条边是以这个顶点为起点指向其他顶点
		微博：关注了多少人

	带权图（weighted graph）：每条边都有一个权重（weight）
		QQ：亲密度
案例
	微信：无向图
	微博：有向图
	QQ

邻接矩阵存储方法
	邻接矩阵（Adjacency Matrix）的底层依赖一个二维数组
		对于无向图来说，如果顶点 i 与顶点 j 之间有边，那就将 A[i][j]和 A[j][i]标记为 1
		对于有向图来说，如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，那就将 A[i][j]标记为 1
		对于带权图，数组中就存储相应的权重
	缺点
		无向图的二维数组中，如果将其用对角线划分为上下两部分，那只需要利用上面或者下面这样一半的空间就足够
		如果存储的是稀疏图（Sparse Matrix），也就是说，顶点很多，但每个顶点的边并不多，那邻接矩阵的存储方法就更加浪费空间了
	优点
		查询效率高
			邻接矩阵的存储方式简单、直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效
		方便军阵计算
			可以将很多图的运算转换成矩阵之间的运算
			如求解最短路径问题时，Floyd-Warshall 算法，就是利用矩阵循环相乘若干次得到结果
			https://zh.wikipedia.org/wiki/Floyd-Warshall%E7%AE%97%E6%B3%95
		空间换时间
邻接表存储方法
	邻接表（Adjacency List）：很像散列表
		每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点
		有向图：每个顶点对应的链表里面，存储的是指向的顶点
		无向图：每个顶点的链表中存储的，是跟这个顶点有边相连的顶点
	优缺点
		邻接表存储起来比较节省空间，但是使用起来就比较耗时间
		不方便查找
			链表的存储方式对缓存不友好。所以，比起邻接矩阵的存储方式，在邻接表中查询两个顶点之间的关系就没那么高效了
		时间换空间
	优化
		红黑树：
			将邻接表中的链表改成平衡二叉查找树，就可以更加快速地查找两个顶点之间是否存在边了
		跳表/散列表：
			也可以换成其他动态数据结构，跳表、散列表等
		动态数组：
			还可以改成有序动态数组，，可以通过二分查找的方法来快速定位两个顶点之间否是存在边

如何存储微博、微信等这些社交网络的好友关系吗？
	针对微博用户关系，假设需要支持下面这样几个操作
		判断用户 A 是否关注了用户 B
		判断用户 A 是否是用户 B 的粉丝
		用户 A 关注用户 B
		用户 A 取消关注用户 B
		根据用户名称的首字母排序，分页获取用户的粉丝列表
		根据用户名称的首字母排序，分页获取用户的关注列表
	邻接表：存储用户的关注关系
		因为社交网络是一张稀疏图，使用邻接矩阵存储比较浪费存储空间
		查找某个用户关注了哪些用户非常容易
	逆邻接表：存储用户的被关注关系
		某个用户都被哪些用户关注了，也就是用户的粉丝列表
	优化邻接表：跳表
		因为我们需要按照用户名称的首字母排序，分页来获取用户的粉丝列表或者关注列表
		跳表插入、删除、查找都非常高效，时间复杂度是 O(logn)，空间复杂度上稍高，是 O(n)
		最重要的一点，跳表中存储的数据本来就是有序的了，分页获取粉丝列表或关注列表，就非常高效
	内存存储：分片
		对于小规模的数据，比如社交网络中只有几万、几十万个用户，可以将整个社交关系存储在内存中
		但是如果像微博那样有上亿的用户，数据规模太大，可以通过哈希算法等数据分片方式，将邻接表存储在不同的机器上
		当要查询顶点与顶点关系的时候，就利用同样的哈希算法，先定位顶点所在的机器，然后再在相应的机器上查找
	外部存储：硬盘
		存储空间要比内存会宽裕很多
		数据库是经常用来持久化存储关系数据，建立多个索引

思考
	像微信这种无向图，应该怎么存储呢？
		邻接表
		动态数据结构改进链表，快速操作，如红黑树、跳表等
	关于图这种数据结构，还能想到其他生活或者工作中的例子吗？
		知识图谱（Knowledge Graph）
		地图
		网络
		Gradle 编译工具，内部组织 task 的方式
		Android framework 层提的 CoordinatorLayout，其内部协调子view的联动是用图
		网页通过超链接形成一张有向图
		城市交通网络
		人与人之间的人际关系图
		...
*/
