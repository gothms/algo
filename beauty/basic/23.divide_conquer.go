package basic

/*
分治算法：谈一谈大规模计算框架MapReduce中的分治思想

Google 大数据处理的三驾马车
	MapReduce
	GFS
	Bigtable
MapReduce
	倒排索引
	PageRank 计算
	网页分析
	等搜索引擎相关的技术

如何理解分治算法？
	分治算法（divide and conquer）的核心思想其实就是四个字，分而治之
		将原问题划分成 n 个规模较小，并且结构与原问题相似的子问题，递归地解决这些子问题，然后再合并其结果，就得到原问题的解
	分治 vs 递归
		分治算法是一种处理问题的思想，递归是一种编程技巧
		实际上，分治算法一般都比较适合用递归来实现
		分治算法的递归实现中，每一层递归都会涉及这样三个操作：
			分解：将原问题分解成一系列子问题
			解决：递归地求解各个子问题，若子问题足够小，则直接求解
			合并：将子问题的结果合并成原问题。
	分治算法能解决的问题，一般需要满足下面这几个条件：
		原问题与分解成的小问题具有相同的模式
		原问题分解成的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法跟动态规划的明显区别
		具有分解终止条件，也就是说，当问题足够小时，可以直接求解
		可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了

分治算法应用举例分析：计算逆序度
	有序度 & 逆序度
		完全有序的数据的有序度就是 n(n-1)/2，逆序度等于 0
		倒序排列的数据的有序度就是 0，逆序度是 n(n-1)/2
	如何编程求出一组数据的有序对个数或者逆序对个数呢？
		将数组分成前后两半 A1 和 A2，分别计算 A1 和 A2 的逆序对个数 K1 和 K2
		然后再计算 A1 与 A2 之间的逆序对个数 K3
		那数组 A 的逆序对个数就等于 K1+K2+K3
	借助归并排序，计算逆序度
		// TODO
两个经典问题	TODO
	二维平面上有 n 个点，如何快速计算出两个距离最近的点对？
	有两个 n*n 的矩阵 A，B，如何快速求解两个矩阵的乘积 C=A*B？

分治思想在海量数据处理中的应用
	数据结构和算法，在指导编程和算法设计时，大部分都是基于内存存储和单机处理
	如果要处理的数据量非常大，没法一次性放到内存中，这个时候，这些数据结构和算法就无法工作了
如何给 10GB 的订单文件按照金额排序，内存可能只有 2、3GB？
	思路：
		将海量的数据集合根据某种方法，划分为几个小的数据集合，每个小的数据集合单独加载到内存来解决
		然后再将小数据集合合并成大数据集合
		实际上，利用这种分治的处理思路，不仅仅能克服内存的限制，还能利用多线程或者多机处理，加快处理的速度
	操作：
		可以先扫描一遍订单，根据订单的金额，将 10GB 的文件划分为几个金额区间
		比如订单金额为 1 到 100 元的放到一个小文件，101 到 200 之间的放到另一个文件，以此类推
		每个小文件都可以单独加载到内存排序，最后将这些有序的小文件合并
	GFS：
		果订单数据存储在类似 GFS 这样的分布式系统上，当 10GB 的订单被划分成多个小文件的时候
		每个文件可以并行加载到多台机器上处理，最后再将结果合并在一起，这样并行处理的速度也加快了很多
		注意：
			就是数据的存储与计算所在的机器是同一个或者在网络中靠的很近（比如一个局域网内，数据存取速度很快）
			否则就会因为数据访问的速度，导致整个处理过程不但不会变快，反而有可能变慢
	参见：08.sort_03.go

为什么说 MapReduce 的本质就是分治思想？
	对于谷歌搜索引擎来说，网页爬取、清洗、分析、分词、计算权重、倒排索引等等各个环节中，都会面对如此海量的数据（比如网页）
	所以，利用集群并行处理显然是大势所趋
		一台机器过于低效，那我们就把任务拆分到多台机器上来处理
		如果拆分之后的小任务之间互不干扰，独立计算，最后再将结果合并
	实际上，MapReduce 框架只是一个任务调度器，底层依赖 GFS 来存储数据，依赖 Borg 管理机器
		从 GFS 中拿数据，交给 Borg 中的机器执行，并且时刻监控机器执行的进度
		一旦出现机器宕机、进度卡壳等，就重新从 Borg 中调度一台机器执行
其他 MapReduce 应用场景
	MapReduce 的经典例子，统计文件中单词出现的频率
	处理数据与数据之间没有关系的任务，比如对网页分析、分词等，每个网页可以独立的分析、分词，而这两个网页之间并没有关系
		网页几十亿、上百亿，如果单机处理，效率低下
		可以利用 MapReduce 提供的高可靠、高性能、高容错的并行计算框架，并行地处理这几十亿、上百亿的网页
两种分治算法的典型的应用场景
	指导编码，降低问题求解的时间复杂度
	解决海量数据处理问题

思想
	创新并非离我们很远，创新的源泉来自对事物本质的认识
	无数优秀架构设计的思想来源都是基础的数据结构和算法，这本身就是算法的一个魅力所在

思考
	basic 中的数据结构、算法、解决思路，以及举的例子中，有哪些采用了分治算法的思想呢？
		以下？？？
		1.快速排序算法
		2.合并排序算法
		3.桶排序算法
		4.基数排序算法
		5.二分查找算法
		6.利用递归树求解算法复杂度的思想
		7.分布式数据库利用分片技术做数据处理
		8.MapReduce模型处理思想
	生活、工作中，还有没有其他用到分治算法的地方呢？
*/
