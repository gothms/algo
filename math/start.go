package math

/*
数学和计算机编程的联系
	如果你只想当一个普通的程序员，那么数学对你来说，并不重要
		但是如果你想做一个顶级程序员，梦想着改变世界，那么数学对你来说就很重要了
	机器学习表面上是“写程序”，但实际上剥去外表，本质上就是在研究数学
	数学学得好不好，将会直接决定一个程序员有没有发展潜力
		因为往大了说，数学它其实是一种思维模式，考验的是一个人归纳、总结和抽象的能力。把这个能力放到程序员的世界里，其实就是解决问题的能力
		往小了说，不管是数据结构与算法还是程序设计，其实底层很多原理或者思路都是源自数学
	如果编程语言是血肉，数学的思想和知识就是灵魂
		它可以帮助你选择合适的数据结构和算法、提升系统效率、并且赋予机器智慧。尤其是在大数据和智能化的时代，更是如此

专栏的边界，用一句话来说就是“只做程序员需要学的数学知识”
	编程中最常用的数学概念
		数学分析
		比如数学归纳法、迭代法、递归、排列、组合等
	线性代数和概率统计
		抽象概念、公式、定理
		algo\beauty\advance\04.probablity.go
		probablity.png
	帮你用数学思维来分析问题和解决问题
伽利略曾经说过，“宇宙这本书是用数学语言写成的”，数学是人类科学进步的重要基础
	怀着敬畏的心态去学习、思考数学

程序员应该怎么学数学？
	刘超 | 《趣谈网络协议》专栏作者：“学数学就像学一门新技术”
		数学分析、概率论、线性代数
			我不建议你将大学的数学书拿出来啃一遍，一来耗费大量时间，二来和实际应用结合不起来，往往该看的忽略了，不该看的费了半天劲用不上，过一阵又忘了
		了解一个新技术有三个阶段
			第一阶段是，怎么使用；第二阶段是，如何实现，原理是什么；第三阶段是，为什么这样实现
			学数学和学一门新技术一样，也有这样三个阶段，先用起来，了解原理，然后了解为什么
	徐文浩 | bothub.ai 创始人：“先广度，再深度”
		随着过去几年深度学习成为程序员界的显学，不少程序员开始回头复习微积分、概率论和线性代数这样的基础数学课，乃至开始学习最优化、博弈论这样的应用数学课
		我为什么要学点数学?
			主要是两个原因，一来，数学在工作中用得上；二来，学点数学很多时候是个有趣的事
				譬如说，过去几年火起来的深度学习，以及之前没那么火，但是实际上早早就在搜索、广告这些领域，应用的机器学习和推荐算法
				这里面其实就是结合了微积分、线性代数、概率论之后的最优化问题
			事实上，大部分应用领域的核心解决方案，都是把应用领域的问题，形式化为一个个数学问题
				在找到数学问题的“解法”之后，用写程序的方式翻译成实际应用的“算法”
				而能够应用“数学”的方式来解决问题，是从一个只能套用现成方案的“码农”，向能够将新问题形式化、并找出创新解决方案的“研发工程师”迈出的第一步
			此外，一旦熟悉了机器学习中用到的数学知识，很多想要解决的系统问题，都能通过定义更好的数学优化目标，变成一个能够找到最优解的程序算法，最后通过写个程序，翻译成数学问题来解决
		我是如何学数学的？
			我建议从工作相关的领域开始，先广度，再深度
				从工作相关的领域开始，是让自己一是能有实际用得上学到的知识的机会，二是日常工作中容易耳濡目染，相当于常常在复习
				而先有广度，是让自己在心中有一个问题到解决方法的“地图”，遇到具体的问题能够对得上，容易获得正反馈；然后再有深度，具体去对一个特定的主题学习应用
			当开始深入学一个特定问题的时候，最好的方式是，追一门在线课程
				譬如 Coursera、TEDx，或者在极客时间上找一门课程来学习
				这是因为，在线课程有明确的节奏，通常还会提供作业和测验。通过作业和测验，让自己对自己的学习有一个联系和反馈的过程
				即使实践中没有足够的应用，过一段时间有些知识没有那么熟悉了，但是也容易建立自己很快可以“捡”回来的信心，降低“复习”的启动成本
				跟随在线课程的节奏，可以有效避免“三天打渔两天晒网”的恶习，让学习有始有终
			最后，给你介绍一个有程序员特色的学习方法，针对学习的内容写一点程序
				把正在学习的问题的解法，写一个算法实现出来。这是一个非常有效的练习方式
				譬如学习线性代数，理解仿射，反复读书的效率对我来说，就不如找来 Coding The Matrix，通过写程序，让学习、理解变得更深入
	王天一 | 《人工智能基础课》《机器学习 40 讲》专栏作者：“数学是工具而非问题，是手段而非目的”
		在数学的学习中，首要的问题是明确需求
			作为非数学专业出身的“外行”，我们使用数学的目的不是顶天，而是立地；不是上下求索艰深的理论问题，而是将生活中的具体问题抽象化，进而加以解决

			因此，对于我们这些票友来说，学习数学的基础在于经验而非哲学，比较实际的思路是秉持功利主义的原则，用多少学多少
			掌握基本的线性代数与矩阵论、概率论与数理统计知识足以应付日常的使用，盲目地好高骛远通常有害无益
			理论化和公理化这些比较深邃的尝试固然让人着迷，但它们可能并没有肉眼可见的实用性，对于绝大部分计算机从业者恐怕过于阳春白雪
		其次，在学习时还要理解数学的本质
			数学是工具而非问题，是手段而非目的

			探索世界奥秘的学科是“格物穷理”的物理学，相形之下，数学更像是个任人打扮的小姑娘，它存在的意义就是通过合理的设计简化物理学的研究
			正因如此，在数学中存在着各种各样在现实中不可能出现的理想化模型（比如无穷小和极限的诞生），也存在着对同一个物理过程不同的建模方式（比如矩阵力学和波动力学）
			充分理解数学的人造特质，可以在学习中少走很多无谓的弯路
		理解数学的工具属性就会自然而然地引出了数学学习中的另一个关键点，那就是工具设计的出发点，也就是所谓的数学思想与数学逻辑
			任何一个工具都不是平白无故地设计出来的，它必然要解决某个特定的问题，比如线性代数与矩阵论是对具体对象的抽象表示与运算，比如概率论和数理统计是对不确定性及其定型定量表示的建模

			因此，在掌握每一种数学工具的微观技巧之前，理解它们的宏观目标是更加重要的。只有掌握了工具诞生的背景与目的，才有可能有效地使用它们

		在这里还要多说一句，数学绝不仅仅是算术，把主要精力放在计算上未免因小失大
			同一种工具及其背后的思想可以出现在不同的场景下，解决不同的问题，但是一旦深入到本质层面，就会发现它们实际上是相通的
			同一个工具存在不同应用的例子不胜枚举：
				特征向量计算的是系统的不动点，在数据降维中有举足轻重的作用，但如果熟悉电子通信的话你就会知道，对线性时不变系统的分析（也就是各种变换）都是基于特征向量展开的
				在给定隐马尔可夫模型的观测序列时，可以利用维特比算法求解后验概率最大的状态序列，将这一方法应用在信道编码中，就是最经典的卷积码译码算法
				在分类问题中，以类间方差最大化为标准可以推导出线性判别分析和决策树等模型，应用在图像处理中，类间方差最大化原理给出的就是图像分割中的 Otsu 方法
			凡此种种都说明，即使是不同的学科，使用的数学基础也有着千丝万缕的联系，将基本的数学概念和充分的想象力结合起来，触类旁通就变得轻而易举
		总结起来，我对数学学习的几点拙见是：
			把握数学的工具属性，学习具体方法时先溯因再求果，勤于思考解决相同问题的不同方法，与解决不同问题的相同方法之间的联系与区别

程序员的数学应用地图
	数据结构

	编程语句
	基础算法
		对于架构在这些数据结构和编程语句之上的算法（为了将这些算法和机器学习的算法区分，我称其为通用算法），除了迭代和递归，也体现了排列、组合和动态规划等思想
	机器学习算法
		对于机器学习的算法而言，我们更需要理解概率统计和线性代数的核心思想，包括什么是概率、贝叶斯定理、数据的统计分布、向量、矩阵、线性方程等等

github
	https://github.com/shuang790228/GeekTime-MathLecture-JavaCode
*/
