package _1_basic

/*
数学归纳法（Mathematical Induction）
	对于某些迭代问题，我们其实可以避免一步步的计算，直接从理论上证明某个结论，节约大量的计算资源和时间
什么是数学归纳法？
	数学归纳法的一般步骤是这样的：
		证明基本情况（通常是 n=1 的时候）是否成立
		假设 n=k−1 成立，再证明 n=k 也是成立的（k 为任意大于 1 的自然数）
	和使用迭代法的计算相比，数学归纳法最大的特点就在于“归纳”二字
		它已经总结出了规律。只要我们能够证明这个规律是正确的，就没有必要进行逐步的推算，可以节省很多时间和资源

递归调用和数学归纳的逻辑是一样的？
	我们不仅可以使用数学归纳法从理论上指导编程，还可以使用编程来模拟数学归纳法的证明
	递归调用的代码和数学归纳法的逻辑是一致的
		一旦你理解了数学归纳法，就很容易理解递归调用了
		只要数学归纳证明的逻辑是对的，递归调用的逻辑就是对的，我们没有必要纠结递归函数是如何嵌套调用和返回的
	数学归纳法的核心思想，我把它称为逆向递推
		基于循环的迭代，我把它称为正向递推

数学归纳法在理论上证明了命题是否成立，而无需迭代那样反复计算，因此可以帮助我们节约大量的资源，并大幅地提升系统的性能
	数学归纳法实现的运行时间几乎为 0
	不过，数学归纳法需要我们能做出合理的命题假设，然后才能进行证明。虽然很多时候要做这点比较难，确实也没什么捷径
	你就是要多做题，多去看别人是怎么解题的，自己去积累经验

思考
	在你日常工作的项目中，什么地方用到了数学归纳法来提升代码的运行效率？如果没有遇到过，你可以尝试做做实验，看看是否有提升？

补充
	递归把计算交给计算机，归纳把计算交给人，前者是拿计算机的计算成本换人的时间，后者是拿人的时间换计算机的计算成本
*/
