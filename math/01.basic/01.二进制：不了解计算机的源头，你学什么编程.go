package _1_basic

/*
什么是二进制计数法？
	阿拉伯数字由从 0 到 9 这样 10 个计数符号组成，并采取进位制法
	十进制计数是使用 10 作为基数，那么二进制就是使用 2 作为基数，类比过来，二进制的数位就是 2^n 的形式
计算机为什么使用二进制？
	计算机使用二进制和现代计算机系统的硬件实现有关
		组成计算机系统的逻辑电路通常只有两个状态，即开关的接通与断开
		断开的状态我们用“0”来表示，接通的状态用“1”来表示
		因此，在具体的系统实现中，二进制的数据表达具有抗干扰能力强、可靠性高的优点
		相比之下，如果用十进制设计具有 10 种状态的电路，情况就会非常复杂，判断状态的时候出错的几率就会大大提高
	另外，二进制也非常适合逻辑运算
		逻辑运算中的“真”和“假”，正好与二进制的“0”和“1”两个数字相对应
二进制的位操作
	常见的二进制位操作包括向左移位和向右移位的移位操作，以及“或”“与”“异或”的逻辑操作
	当符号位为 0 时，表示该数值为正数；当符号位为 1 时，表示该数值为负数

	对于符号位（特别是符号位为 1 的时候），我们是否也需要将其右移呢？
		因此，Java 里定义了两种右移，逻辑右移和算术右移
		逻辑右移 1 位，左边补 0 即可
		算术右移时保持符号位不变，除符号位之外的右移一位并补符号位 1。补的 1 仍然在符号位之后
	那么，编译器是如何决定使用逻辑右移还是算数右移呢？
		答案是，取决于运算数的类型。如果运算数类型是 unsigned，则采用逻辑右移；而是 signed，则采用算数右移
		由于左移位无需考虑高位补 1 还是补 0（符号位可能为 1 或 0），所以不需要区分逻辑左移和算术左移

	两个数值按位“异或”结果为 0，是这两个数值相等的必要充分条件，可以作为判断两个变量是否相等的条件

二进制贯穿在很多常用的概念和思想中
	例如逻辑判断、二分法、二叉树等等
	逻辑判断中的真假值就是用二进制的 1 和 0 来表示的
	二分法和二叉树都是把要处理的问题一分为二，正好也可以通过二进制的 1 和 0 来表示

思考
	如果不使用 Java 语言自带的 BigInteger 类，我们还有什么方法来实现十进制到二进制的转换呢？
	（提示：可以使用二进制的移位和按位逻辑操作来实现。）
*/
