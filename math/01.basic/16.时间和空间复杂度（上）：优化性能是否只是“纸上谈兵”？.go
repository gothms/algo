package _1_basic

/*
计算机系统从最初的设计、开发到最终的部署，要经过很多的步骤，而影响系统性能的因素有很多
	我把这些因素分为三大类：算法理论上的计算复杂度、开发实现的方案和硬件设备的规格

基本概念
	算法复杂度是一个比较抽象的概念，通常只是一个估计值，它用于衡量程序在运行时所需要的资源，用于比较不同算法的性能好坏
		同一段代码处理不同的输入数据所消耗的资源也可能不同，所以分析复杂度时，需要考虑三种情况，最差情况、最好情况和平均情况
		复杂度分析会考虑性能的各个方面，不过我们最关注的是两个部分，时间和空间。时间因素是指程序执行的耗时多少，空间因素是程序占用内存或磁盘存储的多少
	我们通常所说的时间复杂度是指渐进时间复杂度，表示程序运行时间随着问题复杂度增加而变化的规律
		同理，空间复杂度是指渐进空间复杂度，表示程序所需要的存储空间随着问题复杂度增加而变化的规律
6 个通用法则
	1. 四则运算法则
		对于时间复杂度，代码的添加，意味着计算机操作的增加，也就是时间复杂度的增加
			如果代码是平行增加的，就是加法。如果是循环、嵌套或者函数的嵌套，那么就是乘法
		对于空间复杂度，同样如此。需要注意的是，空间复杂度看的是对内存空间的使用，而不是计算的次数
			如果语句中没有新开辟空间，那么无论是平行增加还是嵌套增加代码，都不会增加空间复杂度
	2. 主次分明法则
		使用加法或减法时，你可能会遇到不同数量级的复杂度。这个时候，我们只需要看最高数量级的，忽略掉常量、系数和较低数量级的复杂度
		注意，这个法则对于乘法或除法并不适用，因为乘法或除法会改变参与运算的复杂度的数量级
	3. 齐头并进法则
		这个法则主要是运用了多元变量的概念，其核心思想是复杂度可能受到多个因素的影响。在这种情况下，我们要同时考虑所有因素，并在复杂度公式中体现出来
	4. 排列组合法则
		排列组合的思想不仅出现在数学模型的设计中，同样也会出现在复杂度分析中，它经常会用在最好、最坏和平均复杂度分析中
	5. 一图千言法则
		归并排序为例，假设等待排序的数组长为 n
			首先，看数据切分阶段。数据切分的次数，就是切分阶段那棵树的非叶子结点的数量
				这个切分阶段的树是一棵满二叉树，叶子结点是 n 个，那么非叶子结点的数量就是 n-1 个，所以切分的次数也就是 n-1 次
				如果我们切分数据的时候，并不重新生成新的数据，而只是生成切分边界的下标，那么时间复杂度就是 O(n-1)
			在数据归并阶段，我们看二叉树的高度，为 log2n，因此归并的次数为 log2n
				另外，无论数组被细分成多少个小的部分，每次归并都需要扫描整个长度为 n 的数组，因此归并阶段的时间复杂度为 nlog2n
			两个阶段加起来的时间复杂度为 O(n-1)+nlog2n，最终简化为 nlogn
		当然，除了图论，很多简单的图表也能帮助到我们的分析
			在使用动态规划法的时候，我们经常要画出状态转移的表格。看到这类表格，我们可以很容易地得出该算法的时间复杂度和空间复杂度
	6. 时空互换法则
		在给定的计算量下，通常时间复杂度和空间复杂度呈现数学中的反比关系
			这就说明，如果我们无法降低整体的计算量，那么也许可以通过增加空间复杂度来达到降低时间复杂度的目的，或者反之，通过增加时间复杂度来降低空间复杂度
		关于这个规则最直观的例子就是缓存系统
			在没有缓存系统的时候，每次请求都要服务器来处理，因此时间复杂度比较高
			如果使用了缓存系统，那么我们会消耗更多的内存空间，但是降低了请求相应的时间
		在使用广度优先策略优化聚合操作的时候，无论是时间还是空间复杂度，都大幅降低了啊？
			请注意，这里时空互换法则有个前提条件，就是计算量固定
			而聚合操作的优化，是利用了广度优先的特点，大幅减少了整体的计算量，因此可以保证时间和空间复杂度都得到降低

思考
	请尝试使用本次介绍的规则，分析一下双向广度优先搜索的时间和空间复杂度
		就之前的六度关系的例子，假设把关系看作是一个树，每个结点都有 n 个子结点，要确认两个人是几度好友，也就是确认两个结点相距多少层
		如果是单向广度优先搜索，时间复杂度 O(n^degree)，双向可以运用加法法则，两边同时出发，时间复杂度 2 * O(n^(degree/2))
		空间复杂度是队列中暂存的结点的最大值，和时间复杂度一样
*/
