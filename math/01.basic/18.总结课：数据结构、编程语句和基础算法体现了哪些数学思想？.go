package _1_basic

/*
数据结构
	数据结构，它们其实就是一个个解决问题的“模型”。有了这些模型，你就能把一个个具体的问题抽象化，然后再来解决
	数组只对稠密的数列更有效
		如果数列非常稀疏，那么很多数组的元素就是无效值，浪费了存储空间。此外，数组中元素的插入和删除也比较麻烦，需要进行数据的批量移动

		矩阵，也可以使用多维数组来表示
	那么对于稀疏的数列而言，什么样的数据结构更有效呢？答案是链表
		链表中的结点存储了数据，而链表结点之间的相连关系，在 C 和 C++ 语言中是通过指针来实现的，而在 Java 语言中是通过对象引用来实现的
		链表的特点是不能通过下标来直接访问数据，而是必须按照存储的结构逐个读取
		这样做的优势在于，不必事先规定数据的数量，也不再需要保存无效的值，表示稀疏的数列时可以更有效地利用存储空间，同时也利于数据的动态插入和删除
		但是，相对于数组而言，链表无法支持快速地随机访问，进行读写操作时就更耗时

		和数组一样，链表也可以是多维的。对于非常稀疏的矩阵，也可以用多维链表的结构来表达
	在数组和链表这些基础的数据结构之上，我们可以构建更复杂的数据结构，比如哈希表、队列和栈等等
		这些数据结构，提供了逻辑更复杂的模型，可以通过数组、链表或两者的结合来实现

		而哈希表就可以通过数组和链表来构造。在很多编程语言中，哈希表的实现采用的是链地址哈希表

		栈体现了递归的思想，可以实现基于递归的编程
			实际上，计算机系统里的函数递归，在内部也是通过栈来实现的。
			虽然直接通过栈来实现递归不如函数递归调用那么直观，但是，由于栈可以避免过多的中间变量，它可以节省内存空间的使用

		队列和栈最大的不同在于，它是一种先进先出的数据结构，先进入队列的元素会优先得到处理
			队列模拟了日常生活中人们排队的现象，其思想已经延伸到很多大型的数据系统中，例如消息队列
			在消息系统中，生产者会源源不断地推送新的数据，而消费者会对这些消息进行处理
			可是，有时消费者的处理速度会慢于生产者推送的速度，这会带来很多复杂的后续问题，因此我们可以通过队列实现消息的缓冲
			经过这样的异步处理，消息的队列实现了生产者和消费者的松耦合，对消费者起到了保护作用，使它不容易被数据洪流冲垮

		比哈希表，队列和栈更为复杂的数据结构，是基于图论中的各种模型，例如各种二叉树、多叉树、有向图和无向图等等
			通常，这些模型表示了顶点和顶点之间的稀疏关系，所以它们常常是基于指针或者对象引用来实现的

编程语句
	条件语句的一个关键元素是布尔表达式，它其实体现了逻辑代数中逻辑和集合的概念
		逻辑代数，也被称为布尔代数，主要包括了逻辑表达式及其相关的逻辑运算，可以帮助我们消除自然语言所带来的歧义，并严格、准确地描述事物
		当然，逻辑代数在计算机中的应用，远不止条件语句。例如 SQL 语言中的 Select 语句和布尔检索模型
			Select 是 SQL 查询语言中十分常用的语句。这个语句将根据指定的逻辑表达式，在一个数据库中进行查询并返回结果，而返回的结果就是满足条件记录的集合
			类似地，布尔检索模型利用逻辑表达式，确定哪些文档满足检索的条件并把它们作为结果返回
		除了条件语句中的布尔表达式，逻辑代数还体现在编程中的其他地方。例如，SQL 语言中的 Join 操作
			Join 有多种类型，每种类型其实都对应了一种集合的操作
			内连接（inner join）：
				假设被连接的两张数据表分别是左表和右表，那么内连接查询能将左表和右表中能关联起来的数据连接后返回，返回的结果就是两个表中所有相匹配的数据
				如果认为左表是集合 A，右表是集合 B，那么从集合的角度来说，内连接产生的结果是 A、B 两个集合的交集
			外连接（outer join）：
				外连接可以保留左表，右表或全部表。根据这些行为的不同，可分为左外连接、右外连接和全连接。无论哪一种，都是对应于不同的集合操作
	循环语句可以让我们进行有规律地重复性操作，直到满足某个条件。这和迭代法中反复修改某个值的操作非常一致

基础算法
	如何确定服务请求被分配到哪台机器上？这就引出了负载均衡算法
		常见的包括轮询或者源地址哈希算法
		轮询算法把请求按顺序轮流地分配到后端服务器上，它并不关心每台服务器当前的负载
			如果我们对每个请求标上一个自动增加的 ID，我们可以认为轮询算法是对请求的 ID 进行求余操作（或者是求余的哈希函数），被除数就是可用服务器的数量，余数就是接收请求的服务器 ID
		而源地址哈希进一步扩展了这个思想，扩展主要体现在：
			它可以对请求的 IP 或其他唯一标识进行哈希，而不一定是请求的 ID
			哈希函数的变换操作不一定是求余
	RK（Rabin-Karp）匹配算法，在暴力匹配（Brute Force）基础之上，充分利用了迭代法和哈希，提升了算法的效率
		首先，RK 算法可以根据两个字符串哈希后的值。来判断它们是不是相同
			如果哈希值不同，则两个字符串肯定不同，不用再比较
		此外，RK 算法中的哈希设计非常巧妙，让相邻两个子字符串的哈希值产生了固定的联系
			让我们可以通过前一个子串的哈希值，推导出后一个子串的哈希值，这样就能使用迭代法来计算每个子串的哈希值，大大减少了用于哈希函数的计算
	除了分治和动态规划，另一个常用的算法思想是回溯
		我们可以使用回溯来解决的问题包括八皇后和 0/1 背包等等。回溯实际上体现了递归和排列的思想
		不过，它对搜索空间做了一些优化，提前排除了不可能的情况，提升了算法整体的效率
		当然，既然回溯体现了递归的思想，也可以把整个搜索状态表示成树，而对结果的搜索就是树的深度优先遍历

小结
	不同的数据结构，都是在编程中运用数学思维的产物
		每种数据结构都有自身的特点，有利于我们更方便地实现某种特定的数学模型
	1.从数据结构的角度来看，最基本的数组遍历体现了迭代的思想，而链表和树的结构可用于刻画图论中的模型
		栈的先进后出、以及队列的先进先出，分别适用于图的深度优先和广度优先遍历。哈希表则充分利用了哈希函数的特点，大幅降低了查询的时间复杂度
	2.当然，仅仅使用数据结构来存储数据还不够，我们还需要操作这些数据
		为了实现操作流程，条件语句使用了布尔代数来控制编程逻辑，循环和函数嵌套使用迭代、递归和排列组合等思想来实现更精细的数学模型
	3.但是，有时候我们面对的问题太复杂了，除了数据结构和基本的编程语句，我们还需要发明一些算法。为了提升算法的效率，我们需要对其进行复杂度分析
		通常，这些算法中的数学思想就更为明显，因为它们都是为了解决特定的问题，根据特定的数学模型而设计的
		多种数学思维可能都是相通的。比如，递归的思想、排列的结果、二进制数的枚举都可以用树的结构来图示化，因此我们可以通过树来理解

思考
	在你日常的工作项目中，应该经常用到数据结构和算法，能不能列举一下，其中有哪些数学思想呢？
*/
