package _1_basic

/*
余数总是在一个固定的范围内
	整数是没有边界的，它可能是正无穷，也可能是负无穷。但是余数却可以通过某一种关系，让整数处于一个确定的边界内
同余定理
	简单来说，就是两个整数 a 和 b，如果它们除以正整数 m 得到的余数相等，我们就可以说 a 和 b 对于模 m 同余
同余定理的意义到底是什么
	简单来说，同余定理其实就是用来分类的

哈希（Hash）
	将任意长度的输入，通过哈希算法，压缩为某一固定长度的输出
	f(x) = x mod size
		x 表示等待被转换的数值，而 size 表示有限存储空间的大小，mod 表示取余操作
		通过余数，你就能将任何数值，转换为有限范围内的一个数值，然后根据这个新的数值，来确定将数据存放在何处
	f(x) = (x + MAX) mod size
		为了增加数据散列的随机程度，我们还可以在公式中加入一个较大的随机数 MAX
			使用了 MAX 这个随机数之后，被分配到同一个空间中的记录就更加“随机”，更适合需要将数据重新洗牌的应用场景
			比如加密算法、MapReduce 中的数据分发、记录的高速查询和定位等等
		举个例子，比如说我们要加密一组三位数，那我们设定一个这样的加密规则：
			1.先对每个三位数的个、十和百位数，都加上一个较大的随机数
			2.然后将每位上的数都除以 7，用所得的余数代替原有的个、十、百位数
			3.最后将第一位和第三位交换
			因为加密的人知道加密的规则、求余所用的除数 7、除法的商、以及所引入的随机数 590127，所以当拿到 415 的时候，加密者就可以算出原始的数据是 625

思考
	你可以想想，在生活和编程中，还有哪些地方用到了余数的思想呢？
*/
