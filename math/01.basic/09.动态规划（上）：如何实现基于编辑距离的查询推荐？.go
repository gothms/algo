package _1_basic

/*
查询推荐（Query Suggestion）
	它所使用的数学思想，动态规划（Dynamic Programming）

动态规划
	在各种可能的局部解中，找出那些可能达到最优的局部解，而放弃其他的局部解。这个寻找最优解的过程其实就是动态规划
	动态规划需要通过子问题的最优解，推导出最终问题的最优解，因此这种方法特别注重子问题之间的转移关系
	我们通常把这些子问题之间的转移称为状态转移，并把用于刻画这些状态转移的表达式称为状态转移方程

编辑距离（Edit Distance）
	查询推荐
		当你在搜索引擎的搜索框中输入单词的时候，有没有发现，搜索引擎会返回一系列相关的关键词，方便你直接点击
		甚至，当你某个单词输入有误的时候，搜索引擎依旧会返回正确的搜索结果
		搜索下拉提示和关键词纠错，这两个功能其实就是查询推荐
		询推荐的核心思想其实就是，对于用户的输入，查找相似的关键词并进行返回
	查询推荐的这两个功能是针对输入有缺失或者有错误的字符串，依旧返回相应的结果
		由一个字符串转成另一个字符串所需的最少编辑操作次数，我们就叫作编辑距离
		这个概念是俄罗斯科学家莱文斯坦提出来的，所以我们也把编辑距离称作莱文斯坦距离（Levenshtein distance）
		很显然，编辑距离越小，说明这两个字符串越相似，可以互相作为查询推荐
		编辑操作有这三种：把一个字符替换成另一个字符；插入一个字符；删除一个字符
状态转移
	和排列组合等穷举的方法相比，动态规划法关注发现某种最优解
	如果一个问题无需求出所有可能的解，而是要找到满足一定条件的最优解，那么你就可以思考一下，是否能使用动态规划来降低求解的工作量

思考
	理解了动态规划法和状态转移之后，你觉得根据编辑距离来衡量字符串之间的相似程度有什么局限性？你有什么优化方案吗？
		基于编辑距离的算法也有局限性，它只适用于拉丁语系的相似度衡量，所以通常只用于英文或者拼音相关的查询
		如果是在中文这种亚洲语系中，差一个汉字（或字符）语义就会差很远，所以并不适合使用基于编辑距离的算法
*/
