package _1_basic

/*
世界杯比赛
	将所有 32 支队伍分成 8 个小组先进行小组赛的原因。一旦分成小组，每个小组的赛事就是 (4x3)/2=6 场。所有小组赛就是 6x8=48 场
	再加上在 16 强阶段开始采取淘汰制，两两淘汰，所以需要 8+4+2+2=16 场淘汰赛（最后一次加 2 是因为还有 3、4 名的决赛），那么整个世界杯决赛阶段就是 48+16=64 场比赛

组合（Combination）
	全组合（All Combination）
		例如对于集合{1, 2, 3}而言，全组合就是{空集, {1}, {2}, {3}, {1, 2}, {1,3} {2, 3}, {1, 2, 3}}

	n 个元素里取出 m 个的组合，可能性数量就是 n 个里取 m 个的排列数量，除以 m 个全排列的数量，也就是 (n! / (n-m)!) / m!
	对于全组合而言，可能性为 2^n 种。例如，当 n=3 的时候，全组合包括了 8 种情况

如何让计算机来组合队伍？

组合的应用：如何高效地处理词组？
	需求
		当时，我们需要将每篇很长的文章，分隔成一个个的单词，然后对每个单词进行索引，便于日后的查询
		但是很多时候，光有单个的单词是不够的，还要考虑多个单词所组成的词组。例如，“red bluetooth mouse”这样的词组
	处理词组最常见的一种方式是多元文法
		什么是多元文法呢？这词看起来很复杂，其实就是把邻近的几个单词合并起来，组合一个新的词组
			比如我可以把“red”和“bluetooth”合并为“red bluetooth”，还可以把“bluetooth”和“mouse”合并为“bluetooth mouse”
		设计多元文法只是为了方便计算机的处理，而不考虑组合后的词组是不是有正确的语法和语义
			例如“red bluetooth”，从人类的角度来看，这个词就很奇怪。但是毕竟它还会生成很多合理的词组，例如“bluetooth mouse”
			所以，如果不进行任何深入的语法分析，我们其实没办法区分哪些多元词组是有意义的，哪些是没有意义的，因此最简单的做法就是保留所有词组
	普通的多元文法本身存在一个问题，那就是定死了每个元组内单词出现的顺序
		例如，原文中可能出现的是“red bluetooth mouse”，可是用户在查询的时候可能输入的是“bluetooth mouse red”。这么输入肯定不符合语法，但实际上互联网上的用户经常会这么干
		那么，在这种情况下，如果我们只保留原文的“red bluetooth mouse”，就无法将其和用户输入的“bluetooth red mouse”匹配了
		所以，如果我们并不要求查询词组中单词所出现的顺序和原文一致，那该怎么办呢？

		我当时就在想，可以把每个二元或三元组进行全排列，得到所有的可能。但是这样的话，二元组的数量就会增加 1 倍，三元组的数量就会增加 5 倍，一篇文章的数据保存量就会增加 3 倍左右
		我也试过对用户查询做全排列，把原有的二元组查询变为 2 个不同的二元组查询，把原有的三元组查询变为 6 个不同的三元组查询，但是事实是，这样会增加实时查询的耗时
	组合
		多个单词出现时，我并不关心它们的顺序（也就是不关心排列），而只关心它们的组合
		因为无需关心顺序，就意味着我可以对多元组内的单词进行某种形式的标准化
		即使原来的单词出现顺序有所不同，经过这个标准化过程之后，都会变成唯一的顺序
		例如，“red bluetooth mouse”，这三个词排序后就是“bluetooth,mouse,red”，而“bluetooth red mouse”排序后也是“bluetooth,mouse,red”，自然两者就能匹配上了
	我需要做的事情就是在保存文章多元组和处理用户查询这两个阶段分别进行这种排序
		这样既可以减少保存的数据量，同时可以减少查询的耗时

	此外，组合思想还广泛应用在多维度的数据分析中
		比如，我们要设计一个连锁店的销售业绩报表。这张报表有若干个属性，包括分店名称、所在城市、销售品类等等
		那么最基本的总结数据包括每个分店的销售额、每个城市的销售额、每个品类的销售额
		除了这些最基本的数据，我们还可以利用组合的思想，生成更多的筛选条件

思考
	假设现在需要设计一个抽奖系统。需要依次从 100 个人中，抽取三等奖 10 名，二等奖 3 名和一等奖 1 名
	请列出所有可能的组合，需要注意的每人最多只能被抽中 1 次
*/
