package _1_basic

/*
到底什么是迭代法？
	迭代法，简单来说，其实就是不断地用旧的变量值，递推计算新的变量值
迭代法有什么具体应用？
	求数值的精确或者近似解
		典型的方法包括二分法（Bisection method）和牛顿迭代法（Newton’s method）
	在一定范围内查找目标值
		典型的方法包括二分查找
	机器学习算法中的迭代
		相关的算法或者模型有很多，比如 K- 均值算法（K-means clustering）、PageRank 的马尔科夫链（Markov chain）、梯度下降法（Gradient descent）等等
		迭代法之所以在机器学习中有广泛的应用，是因为很多时候机器学习的过程，就是根据已知的数据和一定的假设，求一个局部最优解
		而迭代法可以帮助学习算法逐步搜索，直至发现这种解

1. 求方程的精确或者近似解
	二分迭代法（计算某个给定正整数 n（n>1）的平方根）
		第一，我使用了 deltaThreshold 来控制解的精度
			虽然理论上来说，可以通过二分的无限次迭代求得精确解，但是考虑到实际应用中耗费的大量时间和计算资源，绝大部分情况下，我们并不需要完全精确的数据
		第二，我使用了 maxTry 来控制循环的次数
			之所以没有使用 while(true) 循环，是为了避免死循环
			虽然，在这里使用 deltaThreshold，理论上是不会陷入死循环的，但是出于良好的编程习惯，我们还是尽量避免产生的可能性
	牛顿迭代法
		这是牛顿在 17 世纪提出的一种方法，用于求方程的近似解
		这种方法以微分为基础，每次迭代的时候，它都会去找到比上一个值 x0​ 更接近的方程的根，最终找到近似解。该方法及其延伸也被应用在机器学习的算法中
2. 查找匹配记录
	二分法中的迭代式逼近，不仅可以帮我们求得近似解，还可以帮助我们查找匹配的记录

	在自然语言处理中，我们经常要处理同义词或者近义词的扩展。这时，你手头上会有一个同义词 / 近义词的词典
		对于一个待查找的单词，我们需要在字典中先找出这个单词，以及它所对应的同义词和近义词，然后进行扩展
		比如说，这个字典里有一个关于“西红柿”的词条，其同义词包括了“番茄”和“tomato”
		那么，在处理文章的时候，当我们看到了“西红柿”这个词，就去字典里查一把，拿出“番茄”“tomato”等等，并添加到文章中作为同义词 / 近义词的扩展
		这样的话，用户在搜索“西红柿”这个词的时候，我们就能确保出现“番茄”或者“tomato”的文章会被返回给用户
		乍一看到这个任务的时候，你也许想到了哈希表
	二分查找法进行字典查询的思路
		第一步，将整个字典先进行排序（假设从小到大）
			二分法中很关键的前提条件是，所查找的区间是有序的。这样才能在每次折半的时候，确定被查找的对象属于左半边还是右半边
		第二步，使用二分法逐步定位到被查找的单词
			每次迭代的时候，都找到被搜索区间的中间点，看看这个点上的单词，是否和待查单词一致
			如果一致就返回；如果不一致，要看被查单词比中间点上的单词是小还是大
			如果小，那说明被查的单词如果存在字典中，那一定在左半边；否则就在右半边
		第三步，根据第二步的判断，选择左半边或者后半边，继续迭代式地查找，直到范围缩小到单个的词
			如果到最终仍然无法找到，则返回不存在
	这个方法的整体思路和二分法求解平方根是一致的，主要区别有两个方面：
		第一，每次判断是否终结迭代的条件不同
			求平方根的时候，我们需要判断某个数的平方是否和输入的数据一致
			而这里，我们需要判断字典中某个单词是否和待查的单词相同
		第二，二分查找需要确保被搜索的空间是有序的

思考
	在你曾经做过的项目中，是否使用过迭代法？
	如果有，你觉得迭代法最大的特点是什么？
	如果还没用过，你想想看现在的项目中是否有可以使用的地方？
*/
