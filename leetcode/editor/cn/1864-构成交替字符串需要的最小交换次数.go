//给你一个二进制字符串 s ，现需要将其转化为一个 交替字符串 。请你计算并返回转化所需的 最小 字符交换次数，如果无法完成转化，返回 -1 。
//
// 交替字符串 是指：相邻字符之间不存在相等情况的字符串。例如，字符串 "010" 和 "1010" 属于交替字符串，但 "0100" 不是。
//
// 任意两个字符都可以进行交换，不必相邻 。
//
//
//
// 示例 1：
//
//
//输入：s = "111000"
//输出：1
//解释：交换位置 1 和 4："111000" -> "101010" ，字符串变为交替字符串。
//
//
// 示例 2：
//
//
//输入：s = "010"
//输出：0
//解释：字符串已经是交替字符串了，不需要交换。
//
//
// 示例 3：
//
//
//输入：s = "1110"
//输出：-1
//
//
//
//
// 提示：
//
//
// 1 <= s.length <= 1000
// s[i] 的值为 '0' 或 '1'
//
//
// Related Topics 贪心 字符串 👍 33 👎 0

package main

import "fmt"

func main() {
	s := "010"
	//s = "1110000000100001010100101010000101010101001000001110101000010111101100000111110001000111010111101100001100001001100101011110100011111100000000100011111011110111111011110111010100111101011111111101101100101010110000011110110100101111000100000001100000"
	//s = "00011110110110000000000110110101011101111011111101010010010000000000000001101101010010001011110000001101111111110000110101101101001011000011111011101101100110011111110001100110001110000000001100010111110100111001001111100001000110101111010011001"
	swaps := minSwaps(s) // 60
	fmt.Println(swaps)
}

// leetcode submit region begin(Prohibit modification and deletion)
func minSwaps(s string) int {
	// 贪心：记录 奇/偶 数位，字符的个数

	// 贪心：记录变更的次数
	minVal := func(a, b int) int {
		if b < a {
			return b
		}
		return a
	}
	var (
		n            = len(s)
		zSwap, oSwap int // 标记 0/1 改变的总次数
		oCnt         int
	)
	for i := 0; i < n; i++ {
		b := int(s[i] - '0')
		oCnt += b // 统计 1 的数量
		if i&1 == 0 {
			zSwap += b           // 将 1 换为 0 的次数
			oSwap += (b + 1) & 1 // 将 0 换为 1 的次数
		} else {
			zSwap += (b + 1) & 1
			oSwap += b
		}
	}
	if d := oCnt<<1 - n; d > 1 || d < -1 { // 差值大于 1
		return -1
	}
	if n&1 == 0 { // 偶数个字符：取更小者
		return (minVal(zSwap, oSwap) + 1) >> 1
	}
	if oCnt > n>>1 { // 数量多的字符：起始位置以多的字符开始
		return oSwap >> 1
	} else {
		return zSwap >> 1
	}
}

//leetcode submit region end(Prohibit modification and deletion)
