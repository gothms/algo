//在一个 8x8 的棋盘上，放置着若干「黑皇后」和一个「白国王」。
//
// 给定一个由整数坐标组成的数组 queens ，表示黑皇后的位置；以及一对坐标 king ，表示白国王的位置，返回所有可以攻击国王的皇后的坐标(任意顺序)。
//
//
//
//
// 示例 1：
//
//
//
//
//输入：queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
//输出：[[0,1],[1,0],[3,3]]
//解释：
//[0,1] 的皇后可以攻击到国王，因为他们在同一行上。
//[1,0] 的皇后可以攻击到国王，因为他们在同一列上。
//[3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。
//[0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。
//[4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。
//[2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。
//
//
// 示例 2：
//
//
//
//
//输入：queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
//输出：[[2,2],[3,4],[4,4]]
//
//
// 示例 3：
//
//
//
//
//输入：queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3]
//,[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[
//0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
//输出：[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]
//
//
//
//
// 提示：
//
//
// 1 <= queens.length <= 63
// queens[i].length == 2
// 0 <= queens[i][j] < 8
// king.length == 2
// 0 <= king[0], king[1] < 8
// 一个棋盘格上最多只能放置一枚棋子。
//
//
// Related Topics 数组 矩阵 模拟 👍 59 👎 0

package main

import "fmt"

func main() {
	queens := [][]int{{5, 6}, {7, 7}, {2, 1}, {0, 7}, {1, 6}, {5, 1}, {3, 7}, {0, 3}, {4, 0}, {1, 2}, {6, 3}, {5, 0}, {0, 4}, {
		2, 2}, {1, 1}, {6, 4}, {5, 4}, {0, 0}, {2, 6}, {4, 5}, {5, 2}, {1, 4}, {7, 5}, {2, 3}, {0, 5}, {4, 2}, {1,
		0}, {2, 7}, {0, 1}, {4, 6}, {6, 1}, {0, 6}, {4, 3}, {1, 7}}
	king := []int{3, 4}
	//queens = [][]int{
	//	{4, 0}, {1, 1}, {0, 4}, {2, 6},
	//	{4, 7}, {6, 6}, {7, 4}, {6, 2},
	//	{4, 1}, {2, 2}, {1, 4}, {3, 5},
	//	{4, 6}, {5, 5}, {6, 4}, {5, 3}}
	//king = []int{4, 4}
	attacktheKing := queensAttacktheKing(queens, king)
	fmt.Println(attacktheKing)
}

/*
思路：模拟
	1.皇后的选择
		皇后的方向可以分为 8 个，当一个方向上有多个皇后时，选择哪个呢？
		以国王为圆心，选择离国王最近的皇后
	2.曼哈顿距离，可作为选择皇后的算法
		而这8个方向的曼哈顿距离都是特殊情况，比如：
		它们在同一行，那么只用计算它们的列差，就可以判断哪个皇后更近
		它们在同一“撇”，根据皇后与国王的相对位置，比如皇后在右上角，则选择行值更大的皇后
		具体参见代码
	3.所以关键点在于：定义8个方向，以及在8个方向上皇后和国王的相对位置，即16种情况
		每种情况都可以根据行/列值的大小，来选择皇后
*/
// leetcode submit region begin(Prohibit modification and deletion)
func queensAttacktheKing(queens [][]int, king []int) [][]int {
	const N = 8
	qak := make([][]int, N)
	f := func(a, b int) (int, func(int, int) bool) {
		if a < b {
			return 1, func(a, b int) bool { return a > b } // 需要选更大的
		}
		return 0, func(a, b int) bool { return a < b } // 需要选更小的
	}
	put := func(idx, i int, q []int) {
		j, fn := f(q[i], king[i]) // 计算方向和淘汰时比较的函数
		k := idx + j              // 方向
		if qak[k] == nil || fn(q[i], qak[k][i]) {
			qak[k] = q // 淘汰旧位置
		}
	}
	k, x, y := 0, king[0], king[1]
	for _, q := range queens {
		switch { // 定义 8 个方向以及皇后和国王相对位置需要的元数据
		case q[0] == x: // 同一行
			put(0, 1, q)
		case q[0]-x == q[1]-y: // 捺
			put(2, 0, q)
		case q[1] == y: // 同一列
			put(4, 0, q)
		case q[0]-x+q[1]-y == 0: // 撇
			put(6, 0, q)
		}
	}
	for i := 0; i < N; i++ { // 排除空的位置
		if qak[i] != nil {
			qak[k], k = qak[i], k+1
		}
	}
	return qak[:k]
}

//leetcode submit region end(Prohibit modification and deletion)
