//给你一个 n x n 的网格 grid ，代表一块樱桃地，每个格子由以下三种数字的一种来表示：
//
//
// 0 表示这个格子是空的，所以你可以穿过它。
// 1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。
// -1 表示这个格子里有荆棘，挡着你的路。
//
//
// 请你统计并返回：在遵守下列规则的情况下，能摘到的最多樱桃数：
//
//
// 从位置 (0, 0) 出发，最后到达 (n - 1, n - 1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为 0 或者 1 的格子）；
//
// 当到达 (n - 1, n - 1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；
// 当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为 0 ）；
// 如果在 (0, 0) 和 (n - 1, n - 1) 之间不存在一条可经过的路径，则无法摘到任何一个樱桃。
//
//
//
//
// 示例 1：
//
//
//输入：grid = [[0,1,-1],[1,0,-1],[1,1,1]]
//输出：5
//解释：玩家从 (0, 0) 出发：向下、向下、向右、向右移动至 (2, 2) 。
//在这一次行程中捡到 4 个樱桃，矩阵变成 [[0,1,-1],[0,0,-1],[0,0,0]] 。
//然后，玩家向左、向上、向上、向左返回起点，再捡到 1 个樱桃。
//总共捡到 5 个樱桃，这是最大可能值。
//
//
// 示例 2：
//
//
//输入：grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
//输出：0
//
//
//
//
// 提示：
//
//
// n == grid.length
// n == grid[i].length
// 1 <= n <= 50
// grid[i][j] 为 -1、0 或 1
// grid[0][0] != -1
// grid[n - 1][n - 1] != -1
//
//
// Related Topics 数组 动态规划 矩阵 👍 396 👎 0

package main

import (
	"fmt"
)

func main() {
	grid := [][]int{{1, 1, -1}, {1, -1, 1}, {-1, 1, 1}}
	grid = [][]int{{1}}
	grid = [][]int{
		{1, 1, 1, 1, 0, 0, 0},
		{0, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 1, 0, 0, 1},
		{1, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 1, 1, 1, 1}} // 15
	//grid = [][]int{
	//	{1, -1, 1, -1, 1, 1, 1, 1, 1, -1},
	//	{-1, 1, 1, -1, -1, 1, 1, 1, 1, 1},
	//	{1, 1, 1, -1, 1, 1, 1, 1, 1, 1},
	//	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	//	{-1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	//	{1, -1, 1, 1, 1, 1, -1, 1, 1, 1},
	//	{1, 1, 1, -1, 1, 1, -1, 1, 1, 1},
	//	{1, -1, 1, -1, -1, 1, 1, 1, 1, 1},
	//	{1, 1, -1, -1, 1, 1, 1, -1, 1, -1},
	//	{1, 1, -1, 1, 1, 1, 1, 1, 1, 1}} // 0
	pickup := cherryPickup(grid)
	fmt.Println(pickup)
}

// leetcode submit region begin(Prohibit modification and deletion)
func cherryPickup(grid [][]int) int {
	// dp
	// 注意点：
	// 1.倒序遍历，防止数据污染
	// 2.dp 的所有值初始化为 inf，若哨兵初始化为 0，会造成数据污染（误把初始化的边界 0 当成可到达的起点）
	// 3.dp[1][1] = grid[0][0]，让动态规划有起始值
	const inf = -201
	n := len(grid)
	dp := make([][]int, n+1)
	for i := range dp {
		dp[i] = make([]int, n+1)
		for j := range dp[i] {
			dp[i][j] = inf // 2
		}
	}
	dp[1][1] = grid[0][0] // 3
	for s := 3; s <= n<<1; s++ {
		//for i := max(1, s-n); i <= min(s-1, n); i++ {
		//	for j := i; j <= min(s-1, n); j++ {
		for i := min(s-1, n); i >= max(1, s-n); i-- { // 1
			for j := min(s-1, n); j >= i; j-- {
				if grid[i-1][s-i-1] == -1 || grid[j-1][s-j-1] == -1 {
					dp[i][j] = inf
					continue
				}
				dp[i][j] = max(max(dp[i-1][j], dp[i][j-1]), max(dp[i-1][j-1], dp[i][j])) + grid[i-1][s-i-1]
				if i != j {
					dp[i][j] += grid[j-1][s-j-1]
				}
			}
		}
	}
	return max(dp[n][n], 0)

	// lc
	// 假设两人同时出发，且速度相同。无论这两人怎么走，在时间相同的情况下，他们向右走的步数加上向下走的步数之和是一个定值（设为 k）
	// 设两人的坐标为 (x1,y1) 和 (x2,y2)，则 x1+y1=x2+y2=k。当 x1=x2 时，两个人到达了同一个格子
	// 状态定义：f[k][x1][x2]，两人从 (0,0) 出发，分别到达 (x1,y1) 和 (x2,y2) 摘到的樱桃个数之和的最大值
	// 状态转移：
	// 都往右
	// 往下，往右
	// 往右，往下
	// 都往下
	// 代码实现：可以将 A 和 B 走出的路径的上轮廓看成是 A 走出的路径，下轮廓看成是 B 走出的路径，即视作 A 始终不会走到 B 的下方，则有 x1 ≤ x2
	//const inf = -201 // 1 <= n <= 50
	//n := len(grid)
	//dp := make([][][]int, n<<1-1)
	//for i := range dp {
	//	dp[i] = make([][]int, n)
	//	for j := range dp[i] {
	//		dp[i][j] = make([]int, n)
	//		for k := range dp[i][j] {
	//			dp[i][j][k] = inf
	//		}
	//	}
	//}
	//dp[0][0][0] = grid[0][0]
	//for k := 1; k < n<<1-1; k++ {
	//	for x1 := max(0, k-n+1); x1 <= min(k, n-1); x1++ {
	//		y1 := k - x1
	//		if grid[x1][y1] == -1 {
	//			continue
	//		}
	//		for x2 := x1; x2 <= min(k, n-1); x2++ {
	//			y2 := k - x2
	//			if grid[x2][y2] == -1 {
	//				continue
	//			}
	//			ans := dp[k-1][x1][x2] // 都往右
	//			if x1 > 0 {
	//				ans = max(ans, dp[k-1][x1-1][x2]) // 往下、右
	//			}
	//			if x2 > 0 {
	//				ans = max(ans, dp[k-1][x1][x2-1]) // 往右、下
	//			}
	//			if x1 > 0 && x2 > 0 {
	//				ans = max(ans, dp[k-1][x1-1][x2-1]) // 都往下
	//			}
	//			ans += grid[x1][y1]
	//			if x1 != x2 {
	//				ans += grid[x2][y2]
	//			}
	//			dp[k][x1][x2] = ans
	//		}
	//	}
	//}
	//return max(0, dp[n<<1-2][n-1][n-1])
}

//leetcode submit region end(Prohibit modification and deletion)
