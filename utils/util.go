package main

import (
	"fmt"
	"strings"
)

func main() {
	s := ""
	s = "[[0,1,10],[1,2,5],[2,3,9],[3,4,13]]"
	array := LCArray2GoArray(s)
	fmt.Println(array)

	//str := "[90 342 437 51 46 16 424 66 512 345 329 236 590 185 234 360 52 420 506 160 92 23\n5 465 495 454 390 434 177 356 106 191 222 555 328 281 512 556 58 287 215 309 363\n 77 255 598 64 602 539 336 285 423 72 419 116 174 559 508 561 32 65 424 147 146 \n497 416 276 54 399 521 427 285 426 110 224 121 74 16 313 510 278 415 492 148 464\n 411 222 565 523 254 64 162 488 254 145 18 314 163 94 382 118 553 225 387 225 24\n8 345 349 220 563 340 87 308 521 487 562 454 547 119 246 493 469 359 105 494 70 \n440 609 511 281 540 305 59 527 569 218 21 42 49 452 409 315 491 566 374 537 95 9\n2 527 39 549 142 41 564 275 460 596 356 6 564 49 494 10 595 119 363 137 258 99 1\n92 417 531 35 474 589 379 18 555 145 399 282 332 458 389 420 446 18 497 482 364 \n316 179 383 283 113 175 322 141 388 161 457 578 313 460 279 25 384 168 199 325 1\n69 141 292 136 351 254 372 205 532 60 536 521 131 150 508 228 372 469 184 134 28\n6 277 44 119 204 555 566 233 216 429 376 296 54 424 91 423 509 242 64 44 333 179\n 98 424 277 217 575 52 428 548 531 158 154 403 132 26 390 397 200 531 154 236 60\n7 291 220 608 506 376 316 241 259 407 51 187 65 189 412 252 33 512 199 340 535 5\n55 585 521 293 90 462 415 202 218 63 154 171 341 184 353 591 349 211 56 543 417 \n78 442 97 112 481 225 76 154 440 501 172 249 135 238 123 258 280 398 587 444 466\n 473 467 466 248 490 349 1 337 138 556 228 317 545 36 580 157 157 595 432 444 15\n 595 164 67 123 7 77 560 226 16 436 400 53 258 57 280 605 96 507 461 431 557 598\n 477 41 328 436 569 298 86 211 95 143 192 340 62 130 604 363 235 146 305 86 454 \n590 117 14 11 377 290 98 283 491 79 277 389 237 405 510 146 448 550 577 35 586 2\n70 348 467 402 494 278 548 32 582 57 50 465 317 155 92 200 242 345 473 15 416 56\n1 263 59 186 293 235 0 336 62 550 328 74 182 341 194 281 319 167 319 43 158 493 \n590 348 189 119 232 271 87 108 500 119 304 403 330 298 126 129 523 430 47 425 16\n 139 77 148 528 588 183 452 573 30 70 540 250 538 187 494 523 340 273 477 537 17\n5 265 216 236 293 276 244 152 108 381 534 29 432 314 247 128 226 89 0 407 555 37\n5 388 534 212 237 606 520 583 238 7 202 78 143 202 22 318 87 144 486 307 349 359\n 168 5 163 608 468 46 244 453 57 562 111 286 205 268 428 315 210 540 414 414 198\n 218 110 548 254 38 321 382 127 202 231 235 358 373 529 309 230 372 97 385 474 5\n45 261 269 600 106 398 240 513 2 368 585 579 609 458 242 168 533 324 94 578 89 1\n71 159]\n"
	//goArray := GolandArray2GoArray(str)
	//fmt.Println(goArray)
}

func LCArray2GoArray(s string) string {
	var sb strings.Builder
	sb.WriteString("[][]int")
	for i, c := range s {
		switch c {
		case '[':
			sb.WriteByte('{')
		case ']':
			sb.WriteByte('}')
		default:
			sb.WriteRune(c)
			if c == ',' && i-1 >= 0 && s[i-1] == ']' {
				sb.WriteByte('\n')
			}
		}
	}
	return sb.String()
}
func temp(arr [][]int) {
	//v = lfu.Get(11)
	//lfu.Put(9, 12)
	for _, v := range arr {
		switch len(v) {
		case 1:
			fmt.Printf("v = lfu.Get(%d)\nfmt.Println(v)\n", v[0])
		case 2:
			fmt.Printf("lfu.Put(%d, %d)\n", v[0], v[1])
		}
	}
}
func GolandArray2GoArray(s string) string {
	//s = strings.ReplaceAll(s, " ", ",")
	//s = strings.ReplaceAll(s, "\n\t\t", ",")
	//s = strings.ReplaceAll(s, "[", "{")
	//s = strings.ReplaceAll(s, "]", "}")

	//split := strings.Split(s, ",")
	//ret := make([]int, len(split))
	//for i, v := range split {
	//	ret[i], _ = strconv.Atoi(v)
	//}
	//memo := make(map[int]struct{})
	//for _, v := range ret {
	//	if _, ok := memo[v]; ok {
	//		fmt.Println("================", v)
	//	}
	//	memo[v] = struct{}{}
	//}
	//fmt.Println(memo)

	var sb strings.Builder
	cnt, ma, b := 0, 10, ','
	for i, c := range s {
		switch c {
		case '[':
			sb.WriteRune('{')
		case ']':
			sb.WriteRune('}')
		case ' ':
			sb.WriteRune(b)
			cnt++
			if cnt == ma {
				cnt = 0
				sb.WriteRune('\n')
			}
		case '\t':
			if i > 0 && s[i-1] == '\t' {
				sb.WriteRune(b)
				cnt++
				if cnt == ma {
					cnt = 0
					sb.WriteRune('\n')
				}
			}
		case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
			sb.WriteRune(c)
		}
	}
	return sb.String()
}
